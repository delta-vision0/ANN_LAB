import numpy as np

def capital_letters(email):
    return sum(1 for char in email if char.isupper())

def contains_free(email):
    if "free" in email or "win" in email or "Won" in email:
        return 1
    else:
        return 0

def email_length(email):
    return len(email)

def extract_features(email):
    capital = capital_letters(email)
    contains_free_value = contains_free(email)
    length = email_length(email)
    return np.array([capital, contains_free_value, length])

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def predict(features, weights, bias):
    z = np.dot(features, weights) + bias
    probability = sigmoid(z)
    if probability >= 0.5:
        return 1
    else:
        return 0

def gradient_descent(X, y, weights, bias, learning_rate, epochs):
    m = len(y)
    for _ in range(epochs):
        predictions = sigmoid(np.dot(X, weights) + bias)
        dw = (1/m) * np.dot(X.T, (predictions - y))
        db = (1/m) * np.sum(predictions - y)
        weights -= learning_rate * dw
        bias -= learning_rate * db
    return weights, bias

weights = np.random.randn(3) 
bias = np.random.randn(1)
X = np.array([
    [3, 1, 150],  
    [5, 1, 180],  
    [0, 0, 120],  
    [1, 0, 130],  
])

y = np.array([1, 1, 0, 0])

learning_rate = 0.01
epochs = 1000
weights, bias = gradient_descent(X, y, weights, bias, learning_rate, epochs)

email = "hello dear sir"
x_test = extract_features(email)
y_pred = predict(x_test, weights, bias)

if y_pred == 1:
    print("The email is spam.")
else:
    print("The email is not spam.")

